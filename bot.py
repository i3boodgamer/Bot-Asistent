import asyncio
import sqlite3 as sq
from aiogram import types,executor
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from button import group, people,daysSheduleButtonStudent,subscribeButton,teacherNameButton,daysSheduleButtonTeacher
from datetime import datetime,date
from token_1 import bot,db,dp
# from schedule_teacher import Teacher
# from schedule_student import Student

class Student:
    async def infoGroupId(group):
        global idGroup
        with sq.connect("database.db") as con:
            cur=con.cursor()
            idGroup=(cur.execute(f'SELECT groups_uni.group_id FROM groups_uni WHERE groups_uni.groups_uni = "{group}"').fetchone())[0]
    
   
    async def shedul_week(week_id,group_id):
        with sq.connect("database.db") as con:
            cur=con.cursor()
            text=cur.execute(f"""SELECT days.day, object.para_id,object.object, object.kabinet,object.time_id,object.people
            FROM groups_uni,week,days
            JOIN object ON groups_uni.group_id = object.group_id and week.week_id=object.week_id and days.day_id=object.day_id
            WHERE (days.day_id=1 or days.day_id=2 or days.day_id=3 or days.day_id=4 or days.day_id=5) and week.week_id={week_id} and groups_uni.group_id={group_id}""").fetchall()
            currentDay=''
            shedule=""
            sheduleCurrentDay=""
            for t in text:
                if(t[0]!=currentDay):
                    shedule+="# "*20+"\n"
                    currentDay=t[0]
                    shedule+="\n"+f"<b>{t[0]}</b>"+"\n"
                if(t[2]=="–≠–õ–ï–ö–¢–ò–í–ù–´–ï –ö–£–†–°–´ –ü–û –§–ò–ó–ò–ß–ï–°–ö–û–ô –ö–£–õ–¨–¢–£–†–ï –ò –°–ü–û–†–¢–£"):
                        shedule+=f"<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>"+"\n "+f"‚ùóÔ∏è<code>{t[2]}</code>‚ùóÔ∏è"+"\n"+"\n"
                        continue
                if(t[2]=="–î–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
                    shedule+=f"üñ§<code>{t[2]}</code>üñ§"+"\n"+"\n"
                    shedule+="# "*20+"\n"
                    break
                sheduleCurrentDay = f"<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>\n ‚ùó<code>{t[2]}</code>‚ùó\n üö™{t[3]}üö™\n üë®‚Äçüè´{t[5]}üë®‚Äçüè´\n"
                shedule+=sheduleCurrentDay+"\n"
            return shedule
    

    async def shedulDay(day_id,week_id,group_id):
        with sq.connect("database.db") as con:
            cur=con.cursor()
            text=cur.execute(f"""SELECT object.para_id,object.object, object.kabinet,object.time_id,object.people FROM groups_uni,week,days
            JOIN object ON groups_uni.group_id = object.group_id and week.week_id=object.week_id and days.day_id=object.day_id 
            WHERE days.day_id={day_id}  and week.week_id={week_id} and groups_uni.group_id={group_id}
            """).fetchall()
            sheduleCurrentDay=""
            shedule=""
            for t in text:
                if(t[1]=="–≠–õ–ï–ö–¢–ò–í–ù–´–ï –ö–£–†–°–´ –ü–û –§–ò–ó–ò–ß–ï–°–ö–û–ô –ö–£–õ–¨–¢–£–†–ï –ò –°–ü–û–†–¢–£"):
                    shedule+=f"<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>"+"\n "+f"‚ùó<code>{t[1]}</code>‚ùó"+"\n"*2
                    continue
                if(t[1]=="–î–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
                    shedule+=f"üñ§<code>{t[1]}</code>üñ§"+"\n"+"\n"
                    shedule+="# # # # # # # # # # # # # # # # #"+"\n"
                    continue
                sheduleCurrentDay=f"<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>\n ‚ùó<code>{t[1]}</code>‚ùó\n üö™{t[2]}üö™\n üë®‚Äçüè´{t[4]}üë®‚Äçüè´\n "
                shedule+=sheduleCurrentDay+"\n"
            return shedule
        
    
    async def sms():
        with sq.connect("database.db") as con:
            cur=con.cursor()
            idUser=cur.execute("SELECT `user_id`,`group` FROM `user` WHERE `subscribe` = 1 and `group`!='NULL' and `active`=1").fetchall()
            if(not idUser):
                print("–ù–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
            else:
                for i in idUser:
                    try:
                        await bot.send_message(i[0],text=await Student.shedulDay(day+1,week,i[1]),parse_mode='HTML')
                    except Exception as e:
                        db.set_active(i[0],0)
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç-–±–æ—Ç–∞!: {e}")  

class Teacher:
    

    async def infoIDTeacher(nameTeacherBD: str):
          global idTeacher
          with sq.connect("database.db") as con:
            cur=con.cursor()
            idTeacher=(cur.execute(f'SELECT prepod.ID_prepod FROM prepod WHERE prepod.FIO= "{nameTeacherBD}"').fetchone())[0]

    async def shedulWeek(week_id,prepod_id):
        with sq.connect("database.db") as con:
            cur=con.cursor()
            text=cur.execute(f"""SELECT days.day, groups_uni.groups_uni, object_prepod.para_id, object_prepod.time_id,object_prepod.kab
    FROM groups_uni,week, days, prepod
    JOIN object_prepod ON groups_uni.group_id = object_prepod.group_id and week.week_id=object_prepod.week_id and days.day_id=object_prepod.day_id and prepod.ID_prepod=object_prepod.prepod_id
    WHERE (days.day_id=1 or days.day_id=2 or days.day_id=3 or days.day_id=4 or days.day_id=5) and week.week_id={week_id} and prepod.ID_prepod={prepod_id}""").fetchall()

            
            
            shedule=""
            currentPara=dayID=i=currentDay=0
            
            groups=['','','','','','']
            weekDaysCount=[0,0,0,0,0]

            weekDays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",'–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞']
            for item in text:
                    weekDaysCount[weekDays.index(item[0])]+=1

    
            i=0
            sheduleCurrentDay=""
            for item in text:
                    if(item[1]=="-1" and weekDaysCount[dayID]==0):
                            shedule+="–ù–µ—Ç—É –ø–∞—Ä"+"\n"
                            continue 
                    if(item[0]!=currentPara):
                            currentPara=item[0]
                            shedule+="# "*15+"\n"
                            shedule+="\n"+f"<b>{item[0]}</b>"+"\n"
                            i=0
                            para=0
                    dayID = int(weekDays.index(item[0]))
                    
                    countPara=(cur.execute(f"""SELECT count(para_id)
    FROM groups_uni,week, days, prepod
    JOIN object_prepod ON groups_uni.group_id = object_prepod.group_id and week.week_id=object_prepod.week_id and days.day_id=object_prepod.day_id and prepod.ID_prepod=object_prepod.prepod_id
    WHERE days.day_id={dayID+1}  and week.week_id=1 and prepod.ID_prepod={prepod_id} and para_id={item[2]}""").fetchone())[0]
                    

                    
                    if(weekDaysCount[dayID]!=0):
                            if(item[2]!=currentDay):
                                    currentDay=item[2]
                                    groups[item[2]-1]=item[1]
                            else:
                                    groups[item[2]-1]+=', '+item[1]
                            i+=1
                            if i<countPara:
                                    continue
                            else:
                                    i=0

                    def printText (lesson, time, group, office):
                            return f"<i>–ü–∞—Ä–∞ {lesson}</i> <u>{time}</u>\n ‚ùó<code>{group}</code>‚ùó\n üö™{office}üö™\n" 

                    sheduleCurrentDay = printText(item[2],item[3], groups[item[2]-1] if (len(groups[item[2]-1].split(", "))>1 and para!=item[2]) else item[1] ,item[4])                

                    para=item[2]        
                    shedule+=sheduleCurrentDay+"\n"

            
            shedule+="# "*15+"\n"
            return shedule
    
    async def shedulDay(day_id,week_id,prepod_id):
        with sq.connect("database.db") as con:
            cur=con.cursor()
            text=cur.execute(f"""SELECT object_prepod.para_id,groups_uni.groups_uni, object_prepod.kab,object_prepod.time_id FROM groups_uni,week,days,prepod
JOIN object_prepod ON groups_uni.group_id = object_prepod.group_id and week.week_id=object_prepod.week_id and days.day_id=object_prepod.day_id and prepod.ID_prepod=object_prepod.prepod_id
WHERE days.day_id={day_id}  and week.week_id={week_id} and prepod.ID_prepod={prepod_id}
            """).fetchall()

            
            currentPara=i=0
            
            groups=['','','','','','']
            while text!=None and i<len(text):
                    if(text[i][0]!=currentPara):
                            currentPara=text[i][0]
                            groups[text[i][0]-1]=text[i][1]
                            
                    else:
                            groups[text[i][0]-1]+=', '+text[i][1]
                    i+=1
            shedule=""
            para=0
            
            if len(text)>0:
                for t in text:
                    sheduleCurrentDay=''
                    
                    if(t[1]=="-1"):
                        shedule+="–ù–µ—Ç—É –ø–∞—Ä"+"\n"
                        continue

                    sheduleCurrentDay=f"<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>\n ‚ùó<code>{groups[t[0]-1]}</code>‚ùó\n üö™{t[2]}\n" if(len(groups[t[0]-1].split(", "))>1 and para!=t[0]) else f"<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>\n ‚ùó<code>{t[1]}</code>‚ùó\n üö™{t[2]}üö™\n"
                    para=t[0]
                    shedule+=sheduleCurrentDay+"\n"
            else:
                shedule="–ù–µ—Ç—É –ø–∞—Ä!"
            return shedule


async def backDef(h):
        global back
        back=h

async def infoSheduleGroup(group: str,message:types.Message):
    await backDef(0)
   
    await Student.infoGroupId(group)
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribeButton)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=daysSheduleButtonStudent)

async def infoSheduleTeacher(nameTeaher: str,message:types.Message):
    await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=daysSheduleButtonTeacher)
    await backDef(0)
    await Teacher.infoIDTeacher(nameTeaher)



        
@dp.message_handler(Text(equals="–Ø –°—Ç—É–¥–µ–Ω—Ç"))
async def open_kb_group(message:types.Message):
    global chooseStudent,chooseTeacher
    chooseStudent=1
    chooseTeacher= 0
    await backDef(1)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=group)

@dp.message_handler(Text(equals="–Ø –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"))
async def open_kb_group(message:types.Message):
    global chooseStudent,chooseTeacher
    chooseStudent=0
    chooseTeacher= 1
    await backDef(1)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=teacherNameButton)


@dp.message_handler(Text(equals="–ë–µ–ª–∞–Ω—Ü–µ–≤–∞ –î.–Æ."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–µ–ª–∞–≤–µ–Ω—Ü–µ–≤–∞ –î–∞—Ä—å—è –Æ—Ä—å–µ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ë–µ–ª—ã–π –ê. –ú."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–µ–ª—ã–π –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ë–æ–≥–¥–∞–Ω–æ–≤—Å–∫–∞—è –î. –ï."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–æ–≥–¥–∞–Ω–æ–≤—Å–∫–∞—è –î–∞—Ä—å—è –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ë—É–∏–Ω—Ü–µ–≤ –í. –ù."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë—É–∏–Ω—Ü–µ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ö–∏—Å–µ–ª–µ–≤–∞ –¢. –í."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ö–∏—Å–µ–ª–µ–≤–∞ –¢–∞–º–∞—Ä–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞",message)


@dp.message_handler(Text(equals="–ö–æ–∂–µ–º—è—á–µ–Ω–∫–æ –í. –ò."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ö–æ–∂–µ–º—è—á–µ–Ω–∫–æ –í–∞–¥–∏–º –ò–≤–∞–Ω–æ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ú–∞—Ä—Ç—É—Å–µ–≤–∏—á –ï. –ê."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ú–∞—Ä—Ç—É—Å–µ–≤–∏—á –ï—Ñ–∏–º –ê–ª–µ—Å–∞–Ω–¥—Ä–æ–≤–∏—á",message)
    
@dp.message_handler(Text(equals="–†—ã–∂–∏—Ö –ê. –Æ."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–†—ã–∂–∏—Ö –ê–ª–µ–∫—Å–µ–π –Æ—Ä—å–µ–≤–∏—á",message)

@dp.message_handler(Text(equals="–°–æ–ª–æ–≤—å–µ–≤–∞ –Æ. –ê."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–°–æ–ª–æ–≤—å–µ–≤–∞ –Æ–ª–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ß–µ—Ç–≤–µ—Ä—Ç–∫–æ–≤ –ï. –í."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ß–µ—Ç–≤–µ—Ä—Ç–∫–æ–≤ –ï–≥–æ—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á",message)
    
    
    
@dp.message_handler(Text(equals="–ò–≠-21"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–≠-21", message)

@dp.message_handler(Text(equals="–ò–í–¢-211"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–í–¢-211", message)

@dp.message_handler(Text(equals="–ò–í–¢-212"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–í–¢-212", message)

@dp.message_handler(Text(equals="–ò–°-211"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–°-211", message)

@dp.message_handler(Text(equals="–ò–°-212"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–°-212", message)

@dp.message_handler(Text(equals="–ò–ü–ú–ò-21"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–ü–ú–ò-21", message)

@dp.message_handler(Text(equals="–ò–ü-21"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–ü-21", message)

@dp.message_handler(Text(equals="–ò–ê–¢-21"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–ê–¢-21", message)


@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è")
async def nowDay(message: types.Message):
    global week,count,back,chooseTeacher, chooseStudent, idGroup, idTeacher
    
    
    if chooseTeacher == 0:
        if((day==7 or day==6) and week==2 and count==0):
            count+=1
            week-=1
        elif ((day==7 or day==6) and week==1 and count==0):
            count+=1
            week+=1
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Student.shedulDay(1,week,idGroup),parse_mode='HTML')
            return
        await message.answer(text=await Student.shedulDay(day,week,idGroup),parse_mode='HTML')
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    else:
        if((day==7 or day==6) and week==2 and count==0):
            count+=1
            week-=1
        elif ((day==7 or day==6) and week==1 and count==0):
            count+=1
            week+=1
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Teacher.shedulDay(1,week,idTeacher),parse_mode='HTML')
            return
        await message.answer(text=await Teacher.shedulDay(day,week,idTeacher),parse_mode='HTML')
    



@dp.message_handler(lambda message: message.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞")
async def nextDay(message: types.Message):
    global week, day, count, back,chooseTeacher, chooseStudent, idGroup, idTeacher
    if chooseTeacher == 0:
        if((day==7 or day==6) and week==2 and count==0):
            count+=1
            week-=1
        elif ((day==7 or day==6) and week==1 and count==0):
            count+=1
            week+=1
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Student.shedulDay(1,week,idTeacher),parse_mode='HTML')
            return
        await message.answer(text=await Student.shedulDay(day+1,week,idTeacher),parse_mode='HTML')
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    else:
        if((day==7 or day==6) and week==2 and count==0):
            count+=1
            week-=1
        elif ((day==7 or day==6) and week==1 and count==0):
            count+=1
            week+=1
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Teacher.shedulDay(1,week,idTeacher),parse_mode='HTML')
            return
        await message.answer(text=await Teacher.shedulDay(day+1,week,idTeacher),parse_mode='HTML')

            

@dp.message_handler(lambda message: message.text == "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é")
async def now_week(message: types.Message):
    global week,count,day,chooseTeacher, idGroup, idTeacher
    if(day==7 and week==2 and count==0):
            count+=1
            week-=1
    elif (day==7 and week==1 and count==0):
            count+=1
            week+=1
    if(chooseTeacher==0):
        await message.answer(text=await Student.shedul_week(week,idGroup),parse_mode="HTML")
    else:
        await message.answer(text=await Teacher.shedulWeek(week,idTeacher),parse_mode="HTML")
    
@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
async def next_week(message: types.Message):
    global week,count,back,chooseTeacher, idGroup, idTeacher

    pas=week
    if(pas==2):
        pas-=1
    else:
        pas+=1
    
    if(chooseTeacher==0):
        await message.answer(text=await Student.shedul_week(pas,idGroup),parse_mode="HTML")
    else:
        await message.answer(text=await Teacher.shedulWeek(pas,idTeacher),parse_mode="HTML")
    



@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
async def options(message:types.Message):
    await message.answer(text='–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?', reply_markup=subscribeButton)



@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def open_days(message:types.Message):
    global chooseTeacher
    if chooseTeacher==0:
        if back==0:
            await backDef(1)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=group)
        
        else:
            await backDef(0)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=people)
    else:
        if back==0:
            await backDef(1)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=teacherNameButton)
        
        else:
            await backDef(0)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=people)








@dp.message_handler(commands=['start'])
async def anny_messege(message:types.Message):
    global max_chars_line
    text="–ü—Ä–∏–≤–µ—Ç! –¢—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –°–∏–±–ì–∏—É? –≠—Ç–æ—Ç –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –∂–∏–∑–Ω–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n""–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∂–µ–ª–∞–µ–º—ã–π –¥–µ–Ω—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n""–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–º–∞—Ç—å –≥–æ–ª–æ–≤—É –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ–±—è –∂–¥–µ—Ç, —á–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è.–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–ª–∏–≤–∞–π—Å—è –≤ –∂–∏–∑–Ω—å –ø–µ—Ä–≤–æ–≥–æ –í–£–ó–∞ –ö—É–∑–±–∞—Å—Å–∞!""–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ò–í–¢-211\n""–ö–æ–º–∞–Ω–¥–∞: KIB.org"
    if message.chat.type=='private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, text=text,reply_markup=people)
        

@dp.message_handler(commands=['help'])
async def help_command_handler(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start, /help, /subscribe")

async def schedule_sms():
    global week, day
    nowDayTime=int(datetime.now().strftime("%H:%M").split(":")[1])
    while True:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        nowTime = datetime.now().strftime("%H:%M")
        if(nowTime=="18:00"):
            await Student.sms()
        await asyncio.sleep(nowDayTime-int(nowTime.split(":")[1]))   



@dp.callback_query_handler(lambda callback_query: callback_query.data == "subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    global idGroup
    db.add_user_subscribe(callback_query.from_user.id,1,idGroup)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 18:00 –ø–µ—Ä–µ–¥ —É—á–µ–±–Ω—ã–º –¥–Ω–µ–º!\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞!",reply_markup=daysSheduleButtonStudent)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "not_subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    db.del_user_subscribe(callback_query.from_user.id,0)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",reply_markup=daysSheduleButtonStudent)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)








if __name__ == "__main__":
    day=date.today().weekday()+1
    week=2
    count=0
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_sms())
    executor.start_polling(dp, skip_updates=True,loop=loop)



