import asyncio
import sqlite3 as sq
from aiogram import Bot, Dispatcher, types,executor
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from button import group,student,days_nt,subscribe_b
from datetime import datetime,date
from mailing import DataBase
from token_1 import bot

dp=Dispatcher(bot)
db=DataBase('database.db')


day=date.today()
days=day.weekday()+1
daysnt=1
sms=''

count=back=user_id=chat_id=group_uni=0


    
    



async def back_def(h):
    global back
    back=h

async def group_def(group):
    global group_uni
    with sq.connect("database.db") as con:
        cur=con.cursor()
        result=cur.execute(f'SELECT groups_uni.group_id FROM groups_uni WHERE groups_uni.groups_uni = "{group}"').fetchone()
        group_uni=result[0]

async def shedul_week(week_id,group_id):
    with sq.connect("database.db") as con:
        cur=con.cursor()
        cur.execute(f"""SELECT days.day, object.para_id,object.object, object.kabinet,object.time_id,object.people FROM groups_uni,week,days JOIN object ON groups_uni.group_id = object.group_id and week.week_id=object.week_id and days.day_id=object.day_id  WHERE (days.day_id=1 or days.day_id=2 or days.day_id=3 or days.day_id=4 or days.day_id=5) and week.week_id={week_id} and groups_uni.group_id={group_id}""")
        text=cur.fetchall()
        d=''
        t3=""
        t4=""
        for t in text:
            if(t[0]!=d):
                t3+="# # # # # # # # # # # # # # # # #"+"\n"
                d=t[0]
                t3+="\n"+f"<b>{t[0]}</b>"+"\n"
            if(t[2]=="–≠–õ–ï–ö–¢–ò–í–ù–´–ï –ö–£–†–°–´ –ü–û –§–ò–ó–ò–ß–ï–°–ö–û–ô –ö–£–õ–¨–¢–£–†–ï –ò –°–ü–û–†–¢–£"):
                t3+=f"<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>"+"\n        "+f"‚ùóÔ∏è<code>{t[2]}</code>‚ùóÔ∏è"+"\n"+"                                                                                    "+"\n"
                continue
            if(t[2]=="–î–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
                t3+=f"üñ§<code>{t[2]}</code>üñ§"+"\n"+"\n"
                t3+="# # # # # # # # # # # # # # # # #"+"\n"
                break
            t4 = f"""<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>
        ‚ùó<code>{t[2]}</code>‚ùó
        üö™{t[3]}üö™
        üë®‚Äçüè´{t[5]}üë®‚Äçüè´
                                                                                    """
            t3+=t4+"\n"
        return t3

async def shedul_next_week(week_id,group_id):
    with sq.connect("database.db") as con:
        cur=con.cursor()
        cur.execute(f"""SELECT days.day, object.para_id,object.object, object.kabinet,object.time_id,object.people FROM groups_uni,week,days JOIN object ON groups_uni.group_id = object.group_id and week.week_id=object.week_id and days.day_id=object.day_id  WHERE (days.day_id=1 or days.day_id=2 or days.day_id=3 or days.day_id=4 or days.day_id=5) and week.week_id={week_id} and groups_uni.group_id={group_id}""")
        text=cur.fetchall()
        d=''
        t3=""
        t4=""
        for t in text:
            if(t[0]!=d):
                t3+="# # # # # # # # # # # # # # # # #"+"\n"
                d=t[0]
                t3+="\n"+f"<b>{t[0]}</b>"+"\n"
            if(t[2]=="–≠–õ–ï–ö–¢–ò–í–ù–´–ï –ö–£–†–°–´ –ü–û –§–ò–ó–ò–ß–ï–°–ö–û–ô –ö–£–õ–¨–¢–£–†–ï –ò –°–ü–û–†–¢–£"):
                t3+=f"<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>"+"\n        "+f"‚ùó<code>{t[2]}</code>‚ùó"+"\n"+"                                                                                    "+"\n"
                continue
            if(t[2]=="–î–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
                t3+=f"üñ§<code>{t[2]}</code>üñ§"+"\n"+"\n"
                t3+="# # # # # # # # # # # # # # # # #"+"\n"
                break
            t4 = f"""<i>–ü–∞—Ä–∞ {t[1]}</i> <u>{t[4]}</u>
        ‚ùó<code>{t[2]}</code>‚ùó
        üö™{t[3]}üö™
        üë®‚Äçüè´{t[5]}üë®‚Äçüè´
                                                                                    """
            t3+=t4+"\n"
        
        return t3

async def shedul_day(day_id,week_id,group_id):
    with sq.connect("database.db") as con:
        cur=con.cursor()
        cur.execute(f"""SELECT object.para_id,object.object, object.kabinet,object.time_id,object.people FROM groups_uni,week,days
        JOIN object ON groups_uni.group_id = object.group_id and week.week_id=object.week_id and days.day_id=object.day_id 
        WHERE days.day_id={day_id}  and week.week_id={week_id} and groups_uni.group_id={group_id}
        """)
        text=cur.fetchall()
        t1=""
        t3=""
        for t in text:
            if(t[1]=="–≠–õ–ï–ö–¢–ò–í–ù–´–ï –ö–£–†–°–´ –ü–û –§–ò–ó–ò–ß–ï–°–ö–û–ô –ö–£–õ–¨–¢–£–†–ï –ò –°–ü–û–†–¢–£"):
                    t3+=f"<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>"+"\n        "+f"‚ùó<code>{t[1]}</code>‚ùó"+"\n"
                    continue
            if(t[1]=="–î–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"):
                t3+=f"üñ§<code>{t[1]}</code>üñ§"+"\n"+"\n"
                t3+="# # # # # # # # # # # # # # # # #"+"\n"
                continue
            t1=f"""<i>–ü–∞—Ä–∞ {t[0]}</i> <u>{t[3]}</u>
        ‚ùó<code>{t[1]}</code>‚ùó
        üö™{t[2]}üö™
        üë®‚Äçüè´{t[4]}üë®‚Äçüè´
                                                                                    """
            t3+=t1+"\n"
        
        return t3

        
        

@dp.message_handler(Text(equals="–Ø –°—Ç—É–¥–µ–Ω—Ç"))
async def open_kb_group(message:types.Message):
    await back_def(1)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=group)
day=date.today()

@dp.message_handler(Text(equals="–ò–≠-21"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–≠-21")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–í–¢-211"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–í–¢-211")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–í–¢-212"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–í–¢-212")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–°-211"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–°-211")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–°-212"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–°-212")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–ü–ú–ò-21"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–ü–ú–ò-21")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–ü-21"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–ü-21")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)

@dp.message_handler(Text(equals="–ò–ê–¢-21"))
async def open_rasp(message:types.Message):
    await back_def(0)
    await group_def("–ò–ê–¢-21")
    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribe_b)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=days_nt)


@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è")
async def now_day(message: types.Message):
    global daysnt,days,group_uni,count,sms,back
    print(message.message_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è")

    if(days==7 and daysnt==2 and count==0):
        daysnt-=1
        count+=1
    elif (days==7 and daysnt==1 and count==0):
        count+=1
        daysnt+=1
    elif(days==1):
        count=0
    if(days==6 or days==7):
        await message.answer(text='üî•–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
        return
    

    await message.answer(text= await shedul_day(days,daysnt,group_uni),parse_mode='HTML')
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    



@dp.message_handler(lambda message: message.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞")
async def next_day(message: types.Message):
    global daysnt, days, group_uni, count, back
    print(message.message_id, "–ù–∞ –∑–∞–≤—Ç—Ä–∞")
    

    if((days==7 or days==6) and daysnt==2 and count==0):
        count+=1
        daysnt-=1
    elif ((days==7 or days==6) and daysnt==1 and count==0):
        count+=1
        daysnt+=1
    if(days+1==6 or days+1==7):
        await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
        return
    if days==7:
        await message.answer(text=await shedul_day(1,daysnt,group_uni),parse_mode='HTML')
        return
    await message.answer(text=await shedul_day(days+1,daysnt,group_uni),parse_mode='HTML')
    
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            

@dp.message_handler(lambda message: message.text == "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é")
async def now_week(message: types.Message):
    global daysnt,count,days,sms
    
    
    if(days==7 and daysnt==2 and count==0):
        count+=1
        daysnt-=1
    elif (days==7 and daysnt==1 and count==0):
        count+=1
        daysnt+=1
    global group_uni
    print(message.message_id, "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é")  
    await message.answer(text=await shedul_week(daysnt,group_uni),parse_mode="HTML")
    

@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
async def next_week(message: types.Message):
    global daysnt,count

    pas=daysnt
    if(pas==2):
        pas-=1
    else:
        pas+=1
    global group_uni,back
    
    print(message.message_id, "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")  
    await message.answer(text=await shedul_next_week(pas,group_uni), parse_mode='HTML')
    



@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
async def options(message:types.Message):
    await message.answer(text='–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?', reply_markup=subscribe_b)



@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def open_days(message:types.Message):
    if back==0:
        await back_def(1)
        await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=group)
        
    else:
        await back_def(0)
        await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=student)







async def sms():
    with sq.connect("database.db") as con:
        cur=con.cursor()
        id_user=cur.execute("SELECT `user_id`,`group` FROM `user` WHERE `subscribe` = 1 and `group`!='NULL' and `active`=1").fetchall()
        if(not id_user):
            print("–ù–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
        else:
            for i in id_user:
                user=i[0]
                gr=i[1]
                try:
                    await bot.send_message(user,text=await shedul_day(days+1,daysnt,gr),parse_mode='HTML')
                except Exception as e:
                    db.set_active(user,0)
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç-–±–æ—Ç–∞!: {e}")
            

async def schedule_sms():
    global daysnt, days, group_uni
    now_1=int(datetime.now().strftime("%H:%M").split(":")[1])
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now().strftime("%H:%M")
        if(now=="18:00"):
            await sms()
        
        await asyncio.sleep(now_1-int(now.split(":")[1]))       


 



    



@dp.message_handler(commands=['start'])
async def anny_messege(message:types.Message):
    global max_chars_line
    text="–ü—Ä–∏–≤–µ—Ç! –¢—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –°–∏–±–ì–∏—É? –≠—Ç–æ—Ç –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –∂–∏–∑–Ω–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n""–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∂–µ–ª–∞–µ–º—ã–π –¥–µ–Ω—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n""–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–º–∞—Ç—å –≥–æ–ª–æ–≤—É –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ–±—è –∂–¥–µ—Ç, —á–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è.–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–ª–∏–≤–∞–π—Å—è –≤ –∂–∏–∑–Ω—å –ø–µ—Ä–≤–æ–≥–æ –í–£–ó–∞ –ö—É–∑–±–∞—Å—Å–∞!""–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ò–í–¢-211\n""–ö–æ–º–∞–Ω–¥–∞: KIB.org"
    if message.chat.type=='private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, text=text,reply_markup=student)
        

@dp.message_handler(commands=['help'])
async def help_command_handler(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start, /help, /subscribe")



@dp.callback_query_handler(lambda callback_query: callback_query.data == "subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    global group_uni
    db.add_user_subscribe(callback_query.from_user.id,1,group_uni)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 18:00 –ø–µ—Ä–µ–¥ —É—á–µ–±–Ω—ã–º –¥–Ω–µ–º!\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞!",reply_markup=days_nt)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "not_subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
   db.del_user_subscribe(callback_query.from_user.id,0)
   await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",reply_markup=days_nt)
   await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)





if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_sms())
    executor.start_polling(dp, skip_updates=True,loop=loop)
   



