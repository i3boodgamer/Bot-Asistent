import asyncio
from aiogram import types,executor
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from Bot.button import group, people,daysSheduleButtonStudent,subscribeButton,teacherNameButton,daysSheduleButtonTeacher
from datetime import date

from Class.mailing import mailing
from Class.schedule_student import Student
from Class.schedule_teacher import Teacher
from Bot.token_1 import bot,db,dp




async def backDef(backCount,message: types.Message):
        db.update_back(backCount,message.from_user.id)


# 
async def infoSheduleGroup(nameGroups: str,message: types.Message):
    await backDef(0,message)
    await Student(day,week,message.from_user.id).infoGroupId(nameGroups)
   

    if db.count_verification(message.from_user.id)==0:
        await message.answer(text="–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=subscribeButton)
    else:
        await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=daysSheduleButtonStudent)

async def infoSheduleTeacher(nameTeaher: str,message:types.Message):
    await message.answer(text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=daysSheduleButtonTeacher)
    await backDef(0,message)
    await Teacher(day,week,message.from_user.id).infoIDTeacher(nameTeaher)


#–í—ã–±–æ—Ä
@dp.message_handler(Text(equals="–Ø –°—Ç—É–¥–µ–Ω—Ç üë©‚Äçüéì"))
async def open_kb_group(message:types.Message):
    db.chooseTeacher(0,message.from_user.id)
    await backDef(1,message)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=group)

@dp.message_handler(Text(equals="–Ø –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´"))
async def open_kb_group(message:types.Message):
    db.chooseTeacher(1,message.from_user.id)
    await backDef(1,message)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=teacherNameButton)


#–ü—Ä–µ–ø–æ–¥–≤–∞—Ç–∞–µ–ª–∏
@dp.message_handler(Text(equals="–ë–µ–ª–∞–Ω—Ü–µ–≤–∞ –î.–Æ."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–µ–ª–∞–≤–µ–Ω—Ü–µ–≤–∞ –î–∞—Ä—å—è –Æ—Ä—å–µ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ë–µ–ª—ã–π –ê. –ú."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–µ–ª—ã–π –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ë–æ–≥–¥–∞–Ω–æ–≤—Å–∫–∞—è –î. –ï."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë–æ–≥–¥–∞–Ω–æ–≤—Å–∫–∞—è –î–∞—Ä—å—è –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ë—É–∏–Ω—Ü–µ–≤ –í. –ù."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ë—É–∏–Ω—Ü–µ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ö–∏—Å–µ–ª–µ–≤–∞ –¢. –í."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ö–∏—Å–µ–ª–µ–≤–∞ –¢–∞–º–∞—Ä–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ö–æ–∂–µ–º—è—á–µ–Ω–∫–æ –í. –ò."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ö–æ–∂–µ–º—è—á–µ–Ω–∫–æ –í–∞–¥–∏–º –ò–≤–∞–Ω–æ–≤–∏—á",message)

@dp.message_handler(Text(equals="–ú–∞—Ä—Ç—É—Å–µ–≤–∏—á –ï. –ê."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ú–∞—Ä—Ç—É—Å–µ–≤–∏—á –ï—Ñ–∏–º –ê–ª–µ—Å–∞–Ω–¥—Ä–æ–≤–∏—á",message)
    
@dp.message_handler(Text(equals="–†—ã–∂–∏—Ö –ê. –Æ."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–†—ã–∂–∏—Ö –ê–ª–µ–∫—Å–µ–π –Æ—Ä—å–µ–≤–∏—á",message)

@dp.message_handler(Text(equals="–°–æ–ª–æ–≤—å–µ–≤–∞ –Æ. –ê."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–°–æ–ª–æ–≤—å–µ–≤–∞ –Æ–ª–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",message)

@dp.message_handler(Text(equals="–ß–µ—Ç–≤–µ—Ä—Ç–∫–æ–≤ –ï. –í."))
async def open_rasp_prepod(message:types.Message):
    await infoSheduleTeacher("–ß–µ—Ç–≤–µ—Ä—Ç–∫–æ–≤ –ï–≥–æ—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á",message)
    

#–ì—Ä—É–ø–ø—ã
@dp.message_handler(Text(equals="–ò–≠-21"))
async def open_rasp(message:types.Message):
    await infoSheduleGroup("–ò–≠-21", message)

@dp.message_handler(Text(equals="–ò–í–¢-211"))
async def open_rasp0(message:types.Message):
    await infoSheduleGroup("–ò–í–¢-211", message)

@dp.message_handler(Text(equals="–ò–í–¢-212"))
async def open_rasp1(message:types.Message):
    await infoSheduleGroup("–ò–í–¢-212", message)

@dp.message_handler(Text(equals="–ò–°-211"))
async def open_rasp2(message:types.Message):
    await infoSheduleGroup("–ò–°-211", message)

@dp.message_handler(Text(equals="–ò–°-212"))
async def open_rasp3(message:types.Message):
    await infoSheduleGroup("–ò–°-212", message)

@dp.message_handler(Text(equals="–ò–ü–ú–ò-21"))
async def open_rasp4(message:types.Message):
    await infoSheduleGroup("–ò–ü–ú–ò-21", message)

@dp.message_handler(Text(equals="–ò–ü-21"))
async def open_rasp5(message:types.Message):
    await infoSheduleGroup("–ò–ü-21", message)

@dp.message_handler(Text(equals="–ò–ê–¢-21"))
async def open_rasp6(message:types.Message):
    await infoSheduleGroup("–ò–ê–¢-21", message)


#–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è")
async def nowDay(message: types.Message):
    if (db.select_chooseTeacher(message.from_user.id)==0):
        if(day==6 or day==7):
            await message.answer(text='üî•–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Student(day, week, message.from_user.id).shedulDay(),parse_mode='HTML')
            return
        await message.answer(text=await Student(day, week, message.from_user.id).shedulDay(),parse_mode='HTML')
        
    else:
        if(day==6 or day==7):
            await message.answer(text='üî•–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Teacher(1, week, message.from_user.id).shedulDay(),parse_mode='HTML')
            return
        await message.answer(text=await Teacher(day, week, message.from_user.id).shedulDay(),parse_mode='HTML')


@dp.message_handler(lambda message: message.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞")
async def nextDay(message: types.Message):
    global week, day
    if db.select_chooseTeacher(message.from_user.id) == 0:
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Student(1, week, message.from_user.id).shedulDay(),parse_mode='HTML')
            return
        await message.answer(text=await Student(day+1, week, message.from_user.id).shedulDay(),parse_mode='HTML')
        
    else:
        if(day+1==6 or day+1==7):
            await message.answer(text='üî•–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüî•')
            return
        if day==7:
            await message.answer(text=await Teacher(1, week, message.from_user.id).shedulDay(),parse_mode='HTML')
            return
        await message.answer(text=await Teacher(day+1, week, message.from_user.id).shedulDay(),parse_mode='HTML')


@dp.message_handler(lambda message: message.text == "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é")
async def now_week(message: types.Message):
    global week,day

    if(db.select_chooseTeacher(message.from_user.id))==0:
        await message.answer(text=await Student(day, week, message.from_user.id).shedul_week(),parse_mode="HTML")
    else:
        await message.answer(text=await Teacher(day, week, message.from_user.id).shedulWeek(),parse_mode="HTML")

    
@dp.message_handler(lambda message: message.text == "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
async def next_week(message: types.Message):
    global week

    pas = week - 1 if week == 2 else week + 1
    
    if(db.select_chooseTeacher(message.from_user.id)==0):
        await message.answer(text=await Student(day, pas, message.from_user.id).shedul_week(),parse_mode="HTML")
    else:
        await message.answer(text=await Teacher(day, pas, message.from_user.id).shedulWeek(),parse_mode="HTML")


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
async def options(message:types.Message):
    await message.answer(text='–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?', reply_markup=subscribeButton)


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def open_days(message:types.Message):
    if db.select_chooseTeacher(message.from_user.id)==0:
        if db.select_backCount(message.from_user.id)==0:
            await backDef(1,message)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=group)
        
        else:
            await backDef(0,message)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=people)
    else:
        if db.select_backCount(message.from_user.id)==0:
            await backDef(1,message)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=teacherNameButton)
        
        else:
            await backDef(0,message)
            await message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=people)





#–∫–æ–º–∞–Ω–¥—ã

@dp.message_handler(commands=['start'])
async def anny_messege(message:types.Message):
    text="–ü—Ä–∏–≤–µ—Ç! –¢—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –°–∏–±–ì–∏—É? –≠—Ç–æ—Ç –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –∂–∏–∑–Ω–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n""\n""–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∂–µ–ª–∞–µ–º—ã–π –¥–µ–Ω—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n""\n""–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–º–∞—Ç—å –≥–æ–ª–æ–≤—É –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ–±—è –∂–¥–µ—Ç, —á–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è.\n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–ª–∏–≤–∞–π—Å—è –≤ –∂–∏–∑–Ω—å –ø–µ—Ä–≤–æ–≥–æ –í–£–ó–∞ –ö—É–∑–±–∞—Å—Å–∞!\n""\n""–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ò–í–¢-211\n""–ö–æ–º–∞–Ω–¥–∞: KIB.org"
    if message.chat.type=='private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        print(message.from_user.id)
        await bot.send_message(message.from_user.id, text=text,reply_markup=people)
        
@dp.message_handler(commands=['help'])
async def help_command_handler(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /start, /help, /subscribe")        
        
        
        
        
        


#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

@dp.callback_query_handler(lambda callback_query: callback_query.data == "subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    db.add_user_subscribe(callback_query.from_user.id,1,db.select_idGroup(callback_query.from_user.id))
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 18:00 –ø–µ—Ä–µ–¥ —É—á–µ–±–Ω—ã–º –¥–Ω–µ–º!\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞!",reply_markup=daysSheduleButtonStudent)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "not_subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    db.del_user_subscribe(callback_query.from_user.id,0)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!",reply_markup=daysSheduleButtonStudent)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)




if __name__ == "__main__":
    
    day=date.today().weekday()+1
    week=2
    loop = asyncio.get_event_loop()
    loop.create_task(mailing(day,week).schedule_sms())
    executor.start_polling(dp, skip_updates=True,loop=loop)



